#!/bin/bash

# Fun√ß√£o para exibir barra de progresso estilo Pacman
show_progress() {
    local title=$1
    local progress=0
    local pid=$2
    local dots='‚Ä¢'
    local empty='¬∑'
    local bar_size=20
    
    # Adiciona um timeout para a barra de progresso
    local max_time=300 # 5 minutos, ajuste conforme necess√°rio
    local start_time=$(date +%s)

    while [ $progress -le 100 ] && ([ -z "$pid" ] || kill -0 $pid 2>/dev/null); do
        local current_time=$(date +%s)
        if (( current_time - start_time > max_time )); then
            echo -e "\n‚ö†Ô∏è A opera√ß√£o '$title' demorou muito. A barra de progresso ser√° finalizada."
            break
        fi

        local filled=$((progress * bar_size / 100))
        local empty_count=$((bar_size - filled))
        local bar=""
        
        for ((i=0; i<filled; i++)); do
            bar="${bar}${dots}"
        done
        
        bar="${bar}·óß"
        
        for ((i=0; i<empty_count-1; i++)); do
            bar="${bar}${empty}"
        done
        
        echo -ne "\rüéÆ ${title}... ${bar} ${progress}% "
        sleep 0.1
        progress=$((progress + 5))
    done
    echo -ne "\rüéÆ ${title}... ${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}${dots}·óß 100% \n"
}

# Fun√ß√£o para executar comando com barra de progresso
run_with_progress() {
    local title=$1
    shift
    show_progress "$title" &
    local progress_pid=$!
    # Redireciona stdout e stderr para /dev/null para reduzir a verbosidade do comando real
    "$@" > /dev/null 2>&1 
    local exit_code=$?
    kill $progress_pid 2>/dev/null
    wait $progress_pid 2>/dev/null
    return $exit_code
}

# Fun√ß√£o para configurar vari√°veis de ambiente permanentemente
configurar_variaveis_ambiente() {
    local profile_file="$HOME/.profile"
    local zshrc_file="$HOME/.zshrc"
    local bashrc_file="$HOME/.bashrc"

    echo "üîß Configurando vari√°veis de ambiente permanentemente..."

    # Detectar o shell atual
    local current_shell=$(basename "$SHELL" 2>/dev/null || echo "bash")

    # Configura√ß√µes do Flutter - Usando sintaxe correta para adicionar ao PATH
    local flutter_exports='export ANDROID_HOME="$HOME/Android/Sdk"
export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
export PATH="$PATH:$HOME/flutter/bin"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
export PATH="$PATH:$ANDROID_HOME/platform-tools"
export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"'

    # Fun√ß√£o auxiliar para limpar configura√ß√µes antigas de um arquivo
    clean_old_flutter_config() {
        local file="$1"
        if [ -f "$file" ]; then
            # Remove linhas relacionadas ao Flutter
            sed -i '/# Configura√ß√µes do Flutter/,/# Fim Configura√ß√µes do Flutter/d' "$file" 2>/dev/null
            sed -i '/export.*flutter/d' "$file" 2>/dev/null
            sed -i '/export.*ANDROID_HOME/d' "$file" 2>/dev/null
            sed -i '/export.*ANDROID_SDK_ROOT/d' "$file" 2>/dev/null
            sed -i '/export.*CHROME_EXECUTABLE/d' "$file" 2>/dev/null
        fi
    }

    # Fun√ß√£o auxiliar para adicionar configura√ß√µes
    add_flutter_config() {
        local file="$1"
        local file_name=$(basename "$file")

        if [ ! -f "$file" ]; then
            touch "$file"
            echo "üîß Arquivo ~/$file_name criado."
        fi

        clean_old_flutter_config "$file"

        echo "" >> "$file"
        echo "# Configura√ß√µes do Flutter - Gerado automaticamente" >> "$file"
        echo "$flutter_exports" >> "$file"
        echo "# Fim Configura√ß√µes do Flutter" >> "$file"

        echo "‚ú® Configura√ß√µes adicionadas ao ~/$file_name"
    }

    # Configurar arquivos baseado no shell
    case "$current_shell" in
        "zsh")
            add_flutter_config "$zshrc_file"
            add_flutter_config "$profile_file"  # Para compatibilidade
            ;;
        "bash")
            add_flutter_config "$bashrc_file"
            add_flutter_config "$profile_file"
            ;;
        *)
            add_flutter_config "$profile_file"
            # Tentar zshrc se existir
            if [ -f "$zshrc_file" ]; then
                add_flutter_config "$zshrc_file"
            fi
            # Tentar bashrc se existir
            if [ -f "$bashrc_file" ]; then
                add_flutter_config "$bashrc_file"
            fi
            ;;
    esac

    # Aplicar as vari√°veis na sess√£o atual do script - usando sintaxe correta
    export ANDROID_HOME="$HOME/Android/Sdk"
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    export PATH="$PATH:$HOME/flutter/bin"
    export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_HOME/platform-tools"
    export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

    echo "üéØ Vari√°veis aplicadas na sess√£o atual do script!"
}

# Fun√ß√£o para verificar se Flutter est√° funcionando corretamente
verificar_flutter_funcionando() {
    echo "üß™ Verificando se Flutter est√° funcionando corretamente..."

    # Aplicar vari√°veis no contexto atual - usando sintaxe correta
    export ANDROID_HOME="$HOME/Android/Sdk"
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    export PATH="$PATH:$HOME/flutter/bin"
    export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_HOME/platform-tools"
    export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

    # Verificar se o flutter est√° no PATH
    if ! command -v flutter &> /dev/null; then
        echo "‚ùå Flutter n√£o encontrado no PATH!"
        return 1
    fi

    # Testar comando b√°sico do flutter
    echo "üîç Testando 'flutter --version'..."
    if flutter --version > /dev/null 2>&1; then
        echo "‚úÖ Flutter --version funcionando!"
    else
        echo "‚ùå Erro ao executar flutter --version"
        return 1
    fi

    # Testar flutter doctor
    echo "üîç Testando 'flutter doctor'..."
    local doctor_output=$(flutter doctor 2>&1)
    local doctor_exit_code=$?

    if [ $doctor_exit_code -eq 0 ]; then
        echo "‚úÖ Flutter doctor executado com sucesso!"

        # Verificar se h√° problemas cr√≠ticos
        local critical_errors=$(echo "$doctor_output" | grep -c "‚úó")
        local warnings=$(echo "$doctor_output" | grep -c "!")

        if [ $critical_errors -eq 0 ]; then
            echo "üéâ Flutter est√° funcionando perfeitamente - SEM ERROS!"
        else
            echo "‚ö†Ô∏è Flutter funcionando, mas com $critical_errors erro(s) e $warnings aviso(s)"
        fi

        echo ""
        echo "üìã Resumo do Flutter Doctor:"
        echo "$doctor_output"
        return 0
    else
        echo "‚ùå Erro ao executar flutter doctor"
        return 1
    fi
}

# Fun√ß√£o para garantir configura√ß√£o permanente
garantir_configuracao_permanente() {
    echo "üîí Garantindo que configura√ß√µes sejam permanentes..."

    # Verificar e configurar novamente se necess√°rio
    configurar_variaveis_ambiente

    echo "üí° INSTRU√á√ïES IMPORTANTES:"
    echo "   1. FECHE E REABRA seu terminal para aplicar as configura√ß√µes"
    echo "   2. Ou execute: source ~/.zshrc (para zsh) ou source ~/.bashrc (para bash)"
    echo "   3. Teste com: flutter --version"
    echo ""
    echo "üéØ O Flutter deve funcionar em QUALQUER diret√≥rio ap√≥s reiniciar o terminal!"
}

# Fun√ß√£o para instalar Android Studio
instalar_android_studio() {
    local android_studio_dir="$HOME/android-studio"
    local studio_download_url="https://redirector.gvt1.com/edgedl/android/studio/ide-zips/2024.3.2.14/android-studio-2024.3.2.14-linux.tar.gz"
    local studio_zip_file="/tmp/android-studio.tar.gz"

    if [ -d "$android_studio_dir" ]; then
        echo "üéÆ Android Studio j√° est√° instalado em $android_studio_dir. Pulando a instala√ß√£o."
    else
        echo "üéÆ Instalando Android Studio..."
        run_with_progress "Baixando Android Studio" \
            wget -q "$studio_download_url" -O "$studio_zip_file"
        if [ $? -ne 0 ]; then
            echo "‚ùå Erro ao baixar Android Studio."
            exit 1
        fi

        run_with_progress "Extraindo Android Studio" \
            tar -xzf "$studio_zip_file" -C "$HOME"
        if [ $? -ne 0 ]; then
            echo "‚ùå Erro ao extrair Android Studio."
            exit 1
        fi
        rm "$studio_zip_file"
        echo "‚ú® Android Studio instalado com sucesso!"
    fi
    
    # Tentar inicializar o Android Studio para que ele crie os arquivos de configura√ß√£o
    # e o Flutter possa detectar a vers√£o.
    echo "üîß Tentando inicializar o Android Studio em segundo plano para detec√ß√£o da vers√£o..."
    if [ -f "$android_studio_dir/bin/studio.sh" ]; then
        # Usa nohup para garantir que o processo n√£o seja morto quando o script terminar
        # Redireciona a sa√≠da para evitar polui√ß√£o do terminal
        nohup "$android_studio_dir/bin/studio.sh" > /dev/null 2>&1 & 
        STUDIO_PID=$!
        echo "‚è≥ Dando 10 segundos para o Android Studio inicializar e criar arquivos de configura√ß√£o..."
        sleep 10 # D√° tempo para o Android Studio criar seus arquivos de configura√ß√£o
        kill $STUDIO_PID 2>/dev/null # Tenta matar o processo
        wait $STUDIO_PID 2>/dev/null # Espera o processo morrer
        echo "‚ú® Tentativa de inicializa√ß√£o do Android Studio conclu√≠da (se ele n√£o fechou sozinho, pode ter que fechar manualmente)."
    else
        echo "‚ö†Ô∏è Arquivo studio.sh n√£o encontrado em '$android_studio_dir/bin'. N√£o foi poss√≠vel tentar inicializar o Android Studio."
    fi
}

# Fun√ß√£o para criar atalho do Android Studio no menu
criar_atalho_android_studio() {
    local desktop_file="$HOME/.local/share/applications/android-studio.desktop"
    local android_studio_dir="$HOME/android-studio"

    echo "üîß Criando atalho para o Android Studio..."
    mkdir -p "$HOME/.local/share/applications"

    cat > "$desktop_file" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Android Studio
Exec=$android_studio_dir/bin/studio.sh
Icon=$android_studio_dir/bin/studio.png
Categories=Development;IDE;
Terminal=false
StartupNotify=true
EOF

    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao criar o atalho do Android Studio."
        exit 1
    fi
    echo "‚ú® Atalho do Android Studio criado com sucesso!"
}

# Fun√ß√£o para instalar o Google Chrome oficial
instalar_google_chrome() {
    echo "üéÆ Verificando e instalando Google Chrome..."
    if ! command -v google-chrome-stable &> /dev/null; then
        echo "üåê Google Chrome n√£o encontrado. Tentando instalar via pacman..."

        # Primeiro tenta instalar do reposit√≥rio oficial do Arch
        run_with_progress "Instalando Google Chrome" \
            sudo pacman -S --noconfirm google-chrome

        if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è N√£o foi poss√≠vel instalar via pacman. Voc√™ pode instalar manualmente usando:"
            echo "   yay -S google-chrome (se tiver yay instalado)"
            echo "   ou baixar o .tar.xz do site oficial do Google Chrome"
            return 1
        fi
        echo "‚ú® Google Chrome instalado com sucesso!"
    else
        echo "üéÆ Google Chrome j√° est√° instalado."
    fi
    return 0
}


# Fun√ß√£o para instalar depend√™ncias do Android SDK
instalar_android_sdk() {
    echo "üéÆ Iniciando configura√ß√£o do Android SDK..."
    
    ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" || { echo "‚ùå Erro ao criar diret√≥rio $ANDROID_SDK_ROOT/cmdline-tools"; exit 1; }
    
    # Remover diret√≥rios inconsistentes de cmdline-tools antes de prosseguir
    if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest-2" ]; then
        echo "üîß Removendo diret√≥rio inconsistente: $ANDROID_SDK_ROOT/cmdline-tools/latest-2"
        rm -rf "$ANDROID_SDK_ROOT/cmdline-tools/latest-2"
    fi
    if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
        echo "üîß Removendo instala√ß√£o antiga de cmdline-tools para garantir uma instala√ß√£o limpa."
        rm -rf "$ANDROID_SDK_ROOT/cmdline-tools/latest"
    fi

    # Download e extra√ß√£o do cmdline-tools
    if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
        run_with_progress "Baixando Android Command Line Tools" \
            wget -q "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" \
            -O "/tmp/commandlinetools.zip"
        if [ $? -ne 0 ]; then
            echo "‚ùå Erro ao baixar Android Command Line Tools."
            exit 1
        fi
        
        # Corre√ß√£o: Certifique-se de que a extra√ß√£o e a atualiza√ß√£o n√£o se sobreponham
        run_with_progress "Extraindo Command Line Tools" \
            bash -c "unzip -q /tmp/commandlinetools.zip -d /tmp && \
                     mkdir -p '$ANDROID_SDK_ROOT/cmdline-tools/latest' && \
                     mv /tmp/cmdline-tools/* '$ANDROID_SDK_ROOT/cmdline-tools/latest/' && \
                     rm -rf /tmp/cmdline-tools /tmp/commandlinetools.zip"
        if [ $? -ne 0 ]; then
            echo "‚ùå Erro ao extrair Command Line Tools."
            exit 1
        fi
    else
        echo "üéÆ Android Command Line Tools j√° est√£o instalados."
    fi
    
    # Configurar vari√°veis de ambiente tempor√°rias para o script
    export ANDROID_HOME="$ANDROID_SDK_ROOT"
    export ANDROID_SDK_ROOT="$ANDROID_SDK_ROOT"
    export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
    
    # Configurar vari√°veis tempor√°rias para que o sdkmanager funcione
    export ANDROID_HOME="$ANDROID_SDK_ROOT"
    export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

    # Atualizar SDK Manager
    echo "üéÆ Atualizando SDK Manager..."
    SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

    # Verifica se o sdkmanager existe e √© execut√°vel
    if [ ! -x "$SDKMANAGER" ]; then
        echo "‚ùå SDKManager n√£o encontrado ou n√£o execut√°vel em $SDKMANAGER"
        return 1
    fi

    # Executa a atualiza√ß√£o com timeout
    timeout 120 "$SDKMANAGER" --update > /dev/null 2>&1
    echo "‚ú® SDK Manager atualizado."

    # Aceitar licen√ßas - usar uma abordagem mais robusta
    echo "üéÆ Aceitando licen√ßas do Android SDK..."
    # Criar arquivo com 'y' repetidos para aceitar todas as licen√ßas
    TEMP_LICENSE_FILE="/tmp/android_licenses_accept"
    for i in {1..10}; do echo "y"; done > "$TEMP_LICENSE_FILE"

    # Aceitar licen√ßas usando o arquivo tempor√°rio
    "$SDKMANAGER" --licenses < "$TEMP_LICENSE_FILE" > /dev/null 2>&1
    LICENSE_EXIT_CODE=$?
    rm -f "$TEMP_LICENSE_FILE"

    if [ $LICENSE_EXIT_CODE -eq 0 ]; then
        echo "‚ú® Licen√ßas do Android SDK aceitas com sucesso!"
    else
        echo "‚ö†Ô∏è Algumas licen√ßas podem n√£o ter sido aceitas. Continuando..."
    fi
    
    # Instalar componentes do SDK, verificando se j√° est√£o instalados
    echo "üéÆ Verificando e instalando componentes do Android SDK..."

    COMPONENTS=(
        "platform-tools"
        "build-tools;34.0.0" # Pode precisar ajustar a vers√£o para a mais recente compat√≠vel
        "platforms;android-34" # Pode precisar ajustar a vers√£o para a mais recente compat√≠vel
        "cmdline-tools;latest"
    )

    for component in "${COMPONENTS[@]}"; do
        COMPONENT_NAME=$(echo "$component" | cut -d';' -f1 | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++){$i=toupper(substr($i,1,1)) tolower(substr($i,2))}} 1')

        # Verifica se o componente j√° est√° instalado
        INSTALLED_CHECK=$("$SDKMANAGER" --list_installed 2>/dev/null | grep -q "^$component" && echo "installed" || echo "not_installed")

        if [ "$INSTALLED_CHECK" = "installed" ]; then
            echo "üéÆ $COMPONENT_NAME j√° est√° instalado. Pulando."
        else
            echo "üéÆ Instalando $COMPONENT_NAME..."
            # Usar timeout para evitar travamentos e instalar sem barra de progresso personalizada
            timeout 300 "$SDKMANAGER" "$component" > /dev/null 2>&1
            INSTALL_EXIT_CODE=$?

            if [ $INSTALL_EXIT_CODE -eq 0 ]; then
                echo "‚ú® $COMPONENT_NAME instalado com sucesso!"
            else
                echo "‚ùå Erro ao instalar $COMPONENT_NAME (timeout ou falha)."
            fi
        fi
    done
    
    echo "‚ú® Android SDK configurado com sucesso!"
    # Rodar flutter doctor --android-licenses ap√≥s a instala√ß√£o do SDK com aceita√ß√£o autom√°tica
    echo "üéÆ Rodando flutter doctor --android-licenses para garantir..."

    # Aceitar licen√ßas via flutter doctor
    echo "y
y
y
y
y
y
y
y
y
y" | flutter doctor --android-licenses > /dev/null 2>&1

    FLUTTER_LICENSE_EXIT=$?
    if [ $FLUTTER_LICENSE_EXIT -eq 0 ]; then
        echo "‚ú® Licen√ßas aceitas via Flutter Doctor!"
    else
        echo "‚ö†Ô∏è Algumas licen√ßas podem precisar de aceita√ß√£o manual."
    fi
}

# Fun√ß√£o para desinstalar Flutter completamente
desinstalar_flutter() {
    echo "üßπ Iniciando desinstala√ß√£o completa do Flutter..."

    # Remover diret√≥rio do Flutter
    if [ -d "$HOME/flutter" ]; then
        run_with_progress "Removendo Flutter" rm -rf "$HOME/flutter"
        if [ $? -eq 0 ]; then
            echo "‚ú® Diret√≥rio do Flutter removido com sucesso!"
        else
            echo "‚ùå Erro ao remover diret√≥rio do Flutter."
            return 1
        fi
    else
        echo "üéÆ Diret√≥rio do Flutter n√£o encontrado."
    fi

    # Remover Android SDK
    if [ -d "$HOME/Android" ]; then
        echo "üßπ Removendo Android SDK..."
        run_with_progress "Removendo Android SDK" rm -rf "$HOME/Android"
        if [ $? -eq 0 ]; then
            echo "‚ú® Android SDK removido com sucesso!"
        else
            echo "‚ùå Erro ao remover Android SDK."
        fi
    else
        echo "üéÆ Android SDK n√£o encontrado."
    fi

    # Remover Android Studio
    if [ -d "$HOME/android-studio" ]; then
        echo "üßπ Removendo Android Studio..."
        run_with_progress "Removendo Android Studio" rm -rf "$HOME/android-studio"
        if [ $? -eq 0 ]; then
            echo "‚ú® Android Studio removido com sucesso!"
        else
            echo "‚ùå Erro ao remover Android Studio."
        fi
    else
        echo "üéÆ Android Studio n√£o encontrado."
    fi

    # Remover configura√ß√µes do .profile
    if [ -f "$HOME/.profile" ]; then
        echo "üßπ Removendo configura√ß√µes do Flutter do ~/.profile..."
        sed -i '/# Configura√ß√µes do Flutter/,/# Fim Configura√ß√µes do Flutter/d' "$HOME/.profile"
        echo "‚ú® Configura√ß√µes removidas do ~/.profile!"
    fi

    # Remover atalho do Android Studio
    if [ -f "$HOME/.local/share/applications/android-studio.desktop" ]; then
        rm -f "$HOME/.local/share/applications/android-studio.desktop"
        echo "‚ú® Atalho do Android Studio removido!"
    fi

    echo ""
    echo "üéâ Desinstala√ß√£o completa do Flutter conclu√≠da!"
    echo "   Para aplicar as mudan√ßas nas vari√°veis de ambiente, reinicie o terminal ou execute 'source ~/.profile'"
}

# Fun√ß√£o de corre√ß√£o r√°pida do Flutter (integrada)
corrigir_flutter_rapido() {
    echo ""
    echo ""
    echo "==============================================="
    echo "        CORRE√á√ÉO R√ÅPIDA DO FLUTTER"
    echo "==============================================="

    # Aplicar vari√°veis de ambiente imediatamente - usando sintaxe correta
    export ANDROID_HOME="$HOME/Android/Sdk"
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    export PATH="$PATH:$HOME/flutter/bin"
    export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_HOME/platform-tools"
    export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

    echo "‚úÖ Vari√°veis de ambiente aplicadas na sess√£o atual"

    # Verificar se o diret√≥rio do Flutter existe
    if [ ! -d "$HOME/flutter" ]; then
        echo "‚ùå Diret√≥rio ~/flutter N√ÉO encontrado!"
        echo "üí° O Flutter precisa ser instalado primeiro."
        echo "   Use a op√ß√£o 1 do menu para instalar o Flutter."
        return 1
    fi

    echo "‚úÖ Diret√≥rio ~/flutter encontrado"

    # Testar Flutter
    echo "üß™ Testando comandos do Flutter..."

    if command -v flutter &> /dev/null; then
        echo "‚úÖ Comando 'flutter' est√° funcionando!"

        echo "üìã Vers√£o do Flutter:"
        flutter --version

        echo ""
        echo "ü©∫ Executando Flutter Doctor..."
        local doctor_output=$(flutter doctor 2>&1)
        echo "$doctor_output"

        local critical_errors=$(echo "$doctor_output" | grep -c "‚úó")
        local warnings=$(echo "$doctor_output" | grep -c "!")

        if [ $critical_errors -eq 0 ]; then
            echo ""
            echo "üéâ PERFEITO! Flutter funcionando sem erros cr√≠ticos!"
        else
            echo ""
            echo "‚ö†Ô∏è Encontrados $critical_errors erro(s) e $warnings aviso(s)"
        fi

        return 0
    else
        echo "‚ùå Comando 'flutter' N√ÉO est√° funcionando!"

        # Tentar corrigir as configura√ß√µes
        echo "üîß Tentando corrigir configura√ß√µes permanentemente..."

        # Verificar estado atual dos arquivos de configura√ß√£o
        echo "üîç Verificando arquivos de configura√ß√£o..."

        local current_shell=$(basename "$SHELL" 2>/dev/null || echo "bash")
        local config_file=""

        case "$current_shell" in
            "zsh")
                config_file="$HOME/.zshrc"
                ;;
            "bash")
                config_file="$HOME/.bashrc"
                ;;
            *)
                config_file="$HOME/.profile"
                ;;
        esac

        echo "üìÅ Usando arquivo: $config_file"

        # Verificar se as configura√ß√µes existem
        if ! grep -q "flutter/bin" "$config_file" 2>/dev/null; then
            echo "‚ùå Configura√ß√µes do Flutter n√£o encontradas em $config_file"
            echo "üîß Adicionando configura√ß√µes..."

            # Reconfigurar vari√°veis de ambiente
            configurar_variaveis_ambiente

            echo "‚úÖ Configura√ß√µes adicionadas!"
        else
            echo "‚úÖ Configura√ß√µes encontradas, mas podem estar incorretas."
            echo "üîß Reconfigurando..."
            configurar_variaveis_ambiente
        fi

        # Aplicar na sess√£o atual usando sintaxe correta
        export ANDROID_HOME="$HOME/Android/Sdk"
        export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
        export PATH="$PATH:$HOME/flutter/bin"
        export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
        export PATH="$PATH:$ANDROID_HOME/platform-tools"
        export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

        # Testar novamente
        if command -v flutter &> /dev/null; then
            echo "‚úÖ Corre√ß√£o bem-sucedida! Flutter funcionando na sess√£o atual."
            echo ""
            echo "‚ö†Ô∏è  IMPORTANTE: Para funcionar em novos terminais:"
            echo "   1. Feche COMPLETAMENTE este terminal"
            echo "   2. Abra um novo terminal"
            echo "   3. Teste: flutter --version"
            echo ""
            echo "üîß OU EXECUTE AGORA (mais r√°pido):"
            echo "   source ~/.zprofile"
            echo "   source $config_file"
            return 0
        else
            echo "‚ùå Corre√ß√£o falhou. Tentando m√©todo alternativo..."
            echo ""

            # Verificar se o flutter existe fisicamente
            if [ ! -f "$HOME/flutter/bin/flutter" ]; then
                echo "   ‚ùå Arquivo flutter N√ÉO existe em ~/flutter/bin/flutter"
                echo "   üí° Execute a op√ß√£o 1 para reinstalar o Flutter"
                return 1
            fi

            echo "   ‚úÖ Arquivo flutter existe em ~/flutter/bin/flutter"

            # Verificar e corrigir permiss√µes
            if [ ! -x "$HOME/flutter/bin/flutter" ]; then
                echo "   üîß Corrigindo permiss√µes do Flutter..."
                chmod +x "$HOME/flutter/bin/flutter"
                echo "   ‚úÖ Permiss√µes corrigidas"
            fi

            # M√âTODO DEFINITIVO: Configura√ß√£o espec√≠fica para Oh-My-Zsh
            echo "üîß Aplicando m√©todo definitivo para Arch Linux + Oh-My-Zsh..."

            # Verificar se Oh-My-Zsh est√° instalado
            if [ -d "$HOME/.oh-my-zsh" ]; then
                echo "   üìã Oh-My-Zsh detectado - usando m√©todo espec√≠fico"

                # Criar arquivo de configura√ß√£o no diret√≥rio custom do Oh-My-Zsh
                local custom_flutter_file="$HOME/.oh-my-zsh/custom/flutter.zsh"

                # Limpar arquivo antigo se existir
                if [ -f "$custom_flutter_file" ]; then
                    rm "$custom_flutter_file"
                fi

                # Criar novo arquivo de configura√ß√£o
                cat > "$custom_flutter_file" << 'EOF'
# Flutter Configuration for Oh-My-Zsh
# This file is loaded by Oh-My-Zsh automatically

# Flutter PATH
export PATH="$PATH:$HOME/flutter/bin"

# Android SDK
export ANDROID_HOME="$HOME/Android/Sdk"
export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
export PATH="$PATH:$ANDROID_HOME/platform-tools"

# Chrome for Flutter web development
export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

# Verify Flutter is available
if [[ -d "$HOME/flutter" ]]; then
    export FLUTTER_INSTALLED=true
else
    export FLUTTER_INSTALLED=false
fi
EOF

                echo "   ‚úÖ Arquivo flutter.zsh criado em ~/.oh-my-zsh/custom/"

                # Limpar configura√ß√µes duplicadas do zshrc principal
                if [ -f "$HOME/.zshrc" ]; then
                    cp "$HOME/.zshrc" "$HOME/.zshrc.backup_$(date +%s)"
                    sed -i '/export.*flutter/d' "$HOME/.zshrc" 2>/dev/null
                    sed -i '/export.*ANDROID/d' "$HOME/.zshrc" 2>/dev/null
                    sed -i '/export.*CHROME_EXECUTABLE/d' "$HOME/.zshrc" 2>/dev/null
                    sed -i '/# Configura√ß√µes do Flutter/,/# Fim Configura√ß√µes do Flutter/d' "$HOME/.zshrc" 2>/dev/null
                    echo "   üßπ Configura√ß√µes duplicadas removidas do ~/.zshrc"
                fi

            else
                echo "   üìÅ Oh-My-Zsh n√£o detectado - usando m√©todo padr√£o"

                # M√©todo padr√£o para shells sem Oh-My-Zsh
                if [ -f "$config_file" ]; then
                    cp "$config_file" "${config_file}.backup_$(date +%s)"
                    sed -i '/export.*flutter/d' "$config_file" 2>/dev/null
                    sed -i '/export.*ANDROID/d' "$config_file" 2>/dev/null
                    sed -i '/export.*CHROME_EXECUTABLE/d' "$config_file" 2>/dev/null
                    sed -i '/# Configura√ß√µes do Flutter/,/# Fim Configura√ß√µes do Flutter/d' "$config_file" 2>/dev/null
                fi

                echo "" >> "$config_file"
                echo "# Configura√ß√µes do Flutter - M√©todo Padr√£o" >> "$config_file"
                echo 'export PATH="$PATH:$HOME/flutter/bin"' >> "$config_file"
                echo 'export ANDROID_HOME="$HOME/Android/Sdk"' >> "$config_file"
                echo 'export ANDROID_SDK_ROOT="$HOME/Android/Sdk"' >> "$config_file"
                echo 'export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"' >> "$config_file"
                echo "# Fim Configura√ß√µes do Flutter" >> "$config_file"

                echo "   ‚úÖ Configura√ß√µes adicionadas ao $config_file"
            fi

            # Aplicar imediatamente na sess√£o atual
            export PATH="$PATH:$HOME/flutter/bin"
            export ANDROID_HOME="$HOME/Android/Sdk"
            export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
            export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

            # Testar uma √∫ltima vez
            if command -v flutter &> /dev/null; then
                echo "   üéâ SUCESSO! Corre√ß√£o funcionou com m√©todo alternativo!"
                echo ""
                echo "üìã PASSOS FINAIS (ESCOLHA UM):"
                echo ""
                echo "   OP√á√ÉO A (MAIS R√ÅPIDO):"
                echo "   1. üîß Execute: source ~/.zprofile"
                echo "   2. üß™ Teste: flutter --version"
                echo ""
                echo "   OP√á√ÉO B (TRADICIONAL):"
                echo "   1. üö™ FECHE COMPLETAMENTE este terminal"
                echo "   2. üÜï ABRA um novo terminal"
                echo "   3. üß™ Teste: flutter --version"
                echo ""
                return 0
            else
                echo "   ‚ùå Ainda n√£o funcionou. Diagn√≥stico avan√ßado:"
                echo ""
                echo "üÜò INFORMA√á√ïES DE DEPURA√á√ÉO:"
                echo "   üóÇÔ∏è  Shell: $current_shell"
                echo "   üìÅ Arquivo config: $config_file"
                echo "   üìç PATH atual: $PATH"
                echo "   üéØ Flutter location: $(which flutter 2>/dev/null || echo 'N√ÉO ENCONTRADO')"
                echo ""
                echo "üìù SOLU√á√ïES MANUAIS:"
                echo "   1. Execute manualmente: export PATH=\"\$PATH:\$HOME/flutter/bin\""
                echo "   2. Depois teste: flutter --version"
                echo "   3. Se funcionar, o problema √© na configura√ß√£o permanente"
                echo "   4. Caso contr√°rio, use op√ß√£o 1 (reinstalar Flutter)"
                echo ""
                return 1
            fi
        fi
    fi
}

# Fun√ß√£o para verificar e corrigir problemas do Flutter
verificar_e_corrigir() {
    local doctor_output
    doctor_output=$(flutter doctor -v 2>&1)
    # N√£o vamos sair se houver erro aqui, pois a fun√ß√£o tenta corrigir
    
    # Instalar Google Chrome
    instalar_google_chrome
    if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è N√£o foi poss√≠vel instalar o Google Chrome automaticamente. Por favor, instale-o manualmente."
    fi
    
    # Instalar Android Studio
    instalar_android_studio

    # Criar atalho para Android Studio
    criar_atalho_android_studio

    # Verificar Android SDK (a fun√ß√£o j√° trata a instala√ß√£o e licen√ßas)
    instalar_android_sdk

    # Instalar depend√™ncias do sistema
    local deps=(
        "ninja"
        "cmake"
        "clang"
        "pkgconf"
        "gtk3"
        "xz"
        "jdk17-openjdk"
    )
    
    echo "üéÆ Verificando depend√™ncias do sistema..."
    for dep in "${deps[@]}"; do
        if ! pacman -Qi "$dep" &> /dev/null; then
            run_with_progress "Instalando $dep" \
                sudo pacman -S --noconfirm "$dep"
            if [ $? -ne 0 ]; then
                echo "‚ùå Erro ao instalar $dep."
            fi
        else
            echo "üéÆ $dep j√° est√° instalado."
        fi
    done
    
    # Configurar vari√°veis de ambiente permanentemente
    configurar_variaveis_ambiente

    # Aplicar vari√°veis na sess√£o atual para que o flutter funcione imediatamente - usando sintaxe correta
    export ANDROID_HOME="$HOME/Android/Sdk"
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    export PATH="$PATH:$HOME/flutter/bin"
    export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_HOME/platform-tools"
    export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"

    # Limpar o cache do Flutter para for√ßar uma nova detec√ß√£o
    echo "üîß Limpando o cache do Flutter para for√ßar uma nova detec√ß√£o de ferramentas..."
    if command -v flutter &> /dev/null; then
        flutter clean > /dev/null 2>&1
        echo "‚ú® Cache do Flutter limpo."
    else
        echo "‚ö†Ô∏è Flutter n√£o encontrado para limpar cache. Continuando..."
    fi

    # Garantir configura√ß√µes permanentes
    garantir_configuracao_permanente
}

# Fun√ß√£o para realizar a instala√ß√£o completa do Flutter e depend√™ncias
instalar_completo() {
    # Baixar e instalar Flutter
    run_with_progress "Baixando Flutter" \
        wget -q "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.24.5-stable.tar.xz" \
        -O "/tmp/flutter.tar.xz"
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao baixar Flutter."
        exit 1
    fi

    run_with_progress "Extraindo Flutter" \
        tar -xf "/tmp/flutter.tar.xz" -C "$HOME"
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao extrair Flutter."
        exit 1
    fi
    rm "/tmp/flutter.tar.xz"

    # Configurar vari√°veis de ambiente
    configurar_variaveis_ambiente

    # Verificar e corrigir problemas (inclui a instala√ß√£o do SDK, Android Studio e Chrome)
    verificar_e_corrigir

    # Garantir que as configura√ß√µes sejam aplicadas corretamente
    garantir_configuracao_permanente

    # Verificar se o Flutter est√° funcionando
    if verificar_flutter_funcionando; then
        echo "üéâ SUCESSO! Flutter instalado e funcionando corretamente!"
    else
        echo "‚ö†Ô∏è Flutter instalado, mas pode precisar de reinicializa√ß√£o do terminal."
        echo "   Por favor, feche e reabra o terminal e teste: flutter --version"
    fi
}

# In√≠cio do script
# Limpa a linha de progresso antes de pedir a senha do sudo, se necess√°rio
echo -ne "\r" # Limpa a linha de progresso
echo "üéÆ Atualizando reposit√≥rios do sistema..."
sudo pacman -Syu --noconfirm > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao atualizar reposit√≥rios. Verifique sua conex√£o ou permiss√µes."
    exit 1
fi
echo "‚ú® Reposit√≥rios atualizados com sucesso!"
echo "" # Nova linha ap√≥s a atualiza√ß√£o para melhor legibilidade

# Vari√°vel para controlar se o Flutter est√° instalado
FLUTTER_INSTALLED=false
# source ~/.profile √© executado aqui para garantir que o script saiba o estado atual
source "$HOME/.profile" > /dev/null 2>&1
if command -v flutter &> /dev/null; then
    FLUTTER_INSTALLED=true
fi

# Menu principal
while true; do
    echo ""
    echo "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ"
    echo "‚îÇ         ‚ú® Instalador Flutter ‚ú®       ‚îÇ"
    echo "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
    echo ""

    if [ "$FLUTTER_INSTALLED" = true ]; then
        echo "üéÆ Flutter j√° est√° instalado! Verificando por erros..."
        # Executa flutter doctor para checar erros, mas n√£o impede o script de continuar
        # Redireciona para /dev/null para evitar poluir o menu
        flutter doctor > /tmp/flutter_doctor.log 2>&1 
        ERROS=$(grep -c "‚úó" /tmp/flutter_doctor.log)

        if [[ "$ERROS" -gt 0 ]]; then
            echo "‚ùå $ERROS problema(s) detectado(s)!"
            echo ""
            echo "   1) Reinstalar o Flutter completamente (recomendado para problemas graves)"
            echo "   2) Apenas corrigir depend√™ncias e configura√ß√µes (Android Studio, SDK, Chrome, etc.)"
            echo "   3) Corre√ß√£o r√°pida do Flutter (se comando 'flutter' n√£o funciona)"
            echo "   4) Desinstalar o Flutter completamente"
        else
            echo "‚ú® Flutter j√° est√° instalado e funcionando corretamente!"
            echo ""
            echo "   1) Reinstalar o Flutter completamente (se algo estiver estranho)"
            echo "   2) Verificar e corrigir depend√™ncias (Android Studio, SDK, Chrome, etc.)"
            echo "   3) Corre√ß√£o r√°pida do Flutter (testar e corrigir comandos)"
            echo "   4) Desinstalar o Flutter completamente"
        fi
        echo "   5) Sair"
        echo ""
        read -r -p "Escolha uma op√ß√£o: " opcao

        case "$opcao" in
            1)
                echo "Removendo instala√ß√£o antiga do Flutter..."
                run_with_progress "Removendo Flutter antigo" rm -rf "$HOME/flutter"
                if [ $? -ne 0 ]; then
                    echo "‚ùå Erro ao remover Flutter antigo."
                    exit 1
                fi
                instalar_completo
                break # Sai do loop ap√≥s a instala√ß√£o
                ;;
            2)
                verificar_e_corrigir
                break # Sai do loop ap√≥s a corre√ß√£o
                ;;
            3)
                corrigir_flutter_rapido
                echo ""
                read -r -p "Pressione ENTER para voltar ao menu..." dummy
                ;;
            4)
                read -r -p "üö® Tem certeza que deseja desinstalar completamente o Flutter? (s/N): " confirma
                if [[ "$confirma" =~ ^[sS]$ ]]; then
                    desinstalar_flutter
                    exit 0
                else
                    echo "‚ö†Ô∏è Desinstala√ß√£o cancelada."
                fi
                ;;
            5)
                echo "Saindo..."
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida! Por favor, escolha novamente."
                ;;
        esac
    else
        echo "üéÆ Flutter n√£o encontrado no sistema."
        echo ""
        echo "   1) Instalar Flutter e todas as depend√™ncias (Android Studio, SDK, Chrome, etc.)"
        echo "   2) Corre√ß√£o r√°pida (se Flutter j√° estiver instalado mas n√£o detectado)"
        echo "   3) Sair"
        echo ""
        read -r -p "Escolha uma op√ß√£o: " opcao

        case "$opcao" in
            1)
                instalar_completo
                break # Sai do loop ap√≥s a instala√ß√£o
                ;;
            2)
                corrigir_flutter_rapido
                echo ""
                read -r -p "Pressione ENTER para voltar ao menu..." dummy
                ;;
            3)
                echo "Saindo..."
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida! Por favor, escolha novamente."
                ;;
        esac
    fi
done

# Recarregar vari√°veis de ambiente (novamente, para o pr√≥prio script e esta sess√£o)
source "$HOME/.profile" || { echo "‚ùå Erro ao recarregar ~/.profile"; exit 1; }

# Verifica√ß√£o final
echo ""
echo "============================================"
echo "  üéâ VERIFICA√á√ÉO FINAL DO FLUTTER üéâ    "
echo "============================================"

# Usar nossa fun√ß√£o de verifica√ß√£o melhorada
if verificar_flutter_funcionando; then
    echo ""
    echo "üéä PARAB√âNS! Flutter instalado e funcionando PERFEITAMENTE!"
    echo "üöÄ Voc√™ j√° pode usar Flutter em qualquer diret√≥rio!"
else
    echo ""
    echo "‚ö†Ô∏è Flutter instalado, mas configura√ß√µes podem precisar de reinicializa√ß√£o."
fi

echo ""
echo "============================================"
echo "           üìù INSTRU√á√ïES FINAIS             "
echo "============================================"
echo "1. üîÑ FECHE E REABRA seu terminal (IMPORTANTE!)"
echo "2. üß™ Teste com: flutter --version"
echo "3. ü©∫ Verifique tudo com: flutter doctor"
echo "4. üéØ O Flutter funcionar√° em QUALQUER pasta/diret√≥rio"
echo ""
echo "üí° Se ainda n√£o funcionar ap√≥s reiniciar:"
echo "   - Execute: source ~/.zshrc (para zsh)"
echo "   - Ou execute: source ~/.bashrc (para bash)"
echo "============================================"
